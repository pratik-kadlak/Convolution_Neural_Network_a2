






































100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████| 313/313 [01:16<00:00,  4.08it/s]








100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 63/63 [00:16<00:00,  3.90it/s]











































100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████| 313/313 [01:25<00:00,  3.67it/s]










100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 63/63 [00:19<00:00,  3.29it/s]
/Users/pratikkadlak/anaconda3/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/Users/pratikkadlak/anaconda3/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=GoogLeNet_Weights.IMAGENET1K_V1`. You can also use `weights=GoogLeNet_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)


























100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████| 313/313 [00:54<00:00,  5.75it/s]
Traceback (most recent call last):
  File "/Users/pratikkadlak/Documents/Convolution_Neural_Network_a2/PartB/train_PartB.py", line 747, in <module>
    train_model(args)
  File "/Users/pratikkadlak/Documents/Convolution_Neural_Network_a2/PartB/train_PartB.py", line 700, in train_model
    outputs = classifier(features)
              ^^^^^^^^^^^^^^^^^^^^
  File "/Users/pratikkadlak/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pratikkadlak/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pratikkadlak/Documents/Convolution_Neural_Network_a2/PartB/train_PartB.py", line 579, in forward
    x = self.activation(x)
        ^^^^^^^^^^^^^^^^^^
  File "/Users/pratikkadlak/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pratikkadlak/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pratikkadlak/anaconda3/lib/python3.11/site-packages/torch/nn/modules/activation.py", line 429, in forward
    return F.mish(input, inplace=self.inplace)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/pratikkadlak/anaconda3/lib/python3.11/site-packages/torch/nn/functional.py", line 2091, in mish
    return torch._C._nn.mish(input)
           ^^^^^^^^^^^^^^^^^^^^^^^^
NotImplementedError: The operator 'aten::mish.out' is not currently implemented for the MPS device. If you want this op to be added in priority during the prototype phase of this feature, please comment on https://github.com/pytorch/pytorch/issues/77764. As a temporary fix, you can set the environment variable `PYTORCH_ENABLE_MPS_FALLBACK=1` to use the CPU as a fallback for this op. WARNING: this will be slower than running natively on MPS.